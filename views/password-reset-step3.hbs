<!DOCTYPE html>
<html lang="en">
<head>
	<meta charset="UTF-8">
	<meta name="viewport" content="width=device-width, initial-scale=1.0">
	<title>OSSU | {{#if user}}Change Password{{else}}Password Reset{{/if}}</title>
	<link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0/css/all.min.css">
	<link rel="stylesheet" href="/css/modern-auth.css">
	<link rel="icon" type="image/x-icon" href="/images/ossu-logo.png">
</head>

<body>
	<div class="auth-background">
		<div class="auth-container">
			<div class="auth-header">
				<h1>{{#if user}}Change Password - New Password{{else}}Password Reset - New Password{{/if}}</h1>
			</div>
			
			{{#if errorMessage}}
				<div class="error-box">
					{{errorMessage}}
				</div>
			{{/if}}

			<form class="auth-form" method="POST" action="/password-reset-final" novalidate>
				<!-- Hidden username field -->
				<input type="hidden" name="username" value="{{username}}">
				
				<div class="input-group">
					<label for="password">New Password</label>
					<div class="input-field with-icon password-field">
						<i class="input-icon fas fa-lock"></i>
						<input type="password" 
						       id="password"
						       name="password" 
						       class="password-input"
						       placeholder="Create a strong password"
						       required 
						       maxlength="30"
						       minlength="15"
						       title="Password must be 15-30 characters long with at least 1 lowercase, 1 uppercase, and 1 numeric character">
						<button type="button" class="password-toggle" id="togglePassword">
							<i class="fas fa-eye"></i> SHOW
						</button>
					</div>
					<div class="char-counter" id="password-counter">0/30</div>
				</div>

				<!-- Password Requirements Display -->
				<div class="password-requirements" id="password-requirements">
					<h3>Password Requirements</h3>
					<div class="requirement-item">
						<span class="requirement-status" id="validatePL">❌</span>
						<span class="requirement-text">15-30 characters long</span>
					</div>
					<div class="requirement-item">
						<span class="requirement-status" id="validateLC">❌</span>
						<span class="requirement-text">At least 1 lowercase letter</span>
					</div>
					<div class="requirement-item">
						<span class="requirement-status" id="validateUC">❌</span>
						<span class="requirement-text">At least 1 uppercase letter</span>
					</div>
					<div class="requirement-item">
						<span class="requirement-status" id="validateNC">❌</span>
						<span class="requirement-text">At least 1 numeric character</span>
					</div>
				</div>

				<div class="input-group">
					<label for="confirmPassword">Confirm New Password</label>
					<div class="input-field with-icon password-field">
						<i class="input-icon fas fa-lock"></i>
						<input type="password" 
						       id="confirmPassword"
						       name="confirmPassword" 
						       class="password-input"
						       placeholder="Confirm your password"
						       required 
						       maxlength="30"
						       minlength="15"
						       title="Password must be 15-30 characters long with at least 1 lowercase, 1 uppercase, and 1 numeric character">
						<button type="button" class="password-toggle" id="toggleConfirmPassword">
							<i class="fas fa-eye"></i> SHOW
						</button>
					</div>
					{{#if fieldErrors.confirmPassword}}
						<div class="field-error">{{fieldErrors.confirmPassword}}</div>
					{{/if}}
					<div id="password-match-message"></div>
					<div class="char-counter" id="confirmPassword-counter">0/30</div>
				</div>

				<div class="input-group">
					<input type="submit" value="{{#if user}}Change Password{{else}}Reset Password{{/if}}" name="submit" class="auth-submit-btn">
				</div>
			</form>

			{{#if user}}
				<!-- Navigation for logged-in users (Change Password flow) -->
				<div class="auth-navigation">
					{{#ifCond position 'Customer'}}
						<a href="/index" class="auth-nav-link">Back to Dashboard</a>
					{{else}}
						<a href="/staff-page" class="auth-nav-link">Back to Dashboard</a>
					{{/ifCond}}
					<a href="/logout" class="auth-nav-link">Logout</a>
				</div>
			{{else}}
				<!-- Navigation for anonymous users (Forgot Password flow) -->
				<div class="auth-navigation">
					<a href="/" class="auth-nav-link">Back to Home</a>
					<a href="/staff-login" class="auth-nav-link">Remember your password? Login</a>
				</div>
			{{/if}}
		</div>
	</div>

	<script src="/js/validation.js"></script>

	<script>
		document.addEventListener("DOMContentLoaded", function () {
			// Initialize validation for customer registration
			if (typeof initializeValidation === 'function') {
				initializeValidation();
			}

			// Password toggle functionality
			const togglePassword = document.getElementById('togglePassword');
			const passwordInput = document.getElementById('password');
			const toggleConfirmPassword = document.getElementById('toggleConfirmPassword');
			const confirmPasswordInput = document.getElementById('confirmPassword');

			function setupPasswordToggle(toggleBtn, passwordField) {
				if (toggleBtn && passwordField) {
					toggleBtn.addEventListener('click', function() {
						const type = passwordField.getAttribute('type') === 'password' ? 'text' : 'password';
						passwordField.setAttribute('type', type);
						
						if (type === 'text') {
							this.innerHTML = '<i class="fas fa-eye-slash"></i> HIDE';
						} else {
							this.innerHTML = '<i class="fas fa-eye"></i> SHOW';
						}
					});
				}
			}

			setupPasswordToggle(togglePassword, passwordInput);
			setupPasswordToggle(toggleConfirmPassword, confirmPasswordInput);

			// Password requirements validation
			if (passwordInput) {
				passwordInput.addEventListener('input', function() {
					const password = this.value;
					
					// Length check
					const lengthCheck = document.getElementById('length-check');
					if (password.length >= 15) {
						lengthCheck.textContent = '✓';
						lengthCheck.className = 'requirement-icon valid';
					} else {
						lengthCheck.textContent = '✗';
						lengthCheck.className = 'requirement-icon invalid';
					}
					
					// Lowercase check
					const lowercaseCheck = document.getElementById('lowercase-check');
					if (/[a-z]/.test(password)) {
						lowercaseCheck.textContent = '✓';
						lowercaseCheck.className = 'requirement-icon valid';
					} else {
						lowercaseCheck.textContent = '✗';
						lowercaseCheck.className = 'requirement-icon invalid';
					}
					
					// Uppercase check
					const uppercaseCheck = document.getElementById('uppercase-check');
					if (/[A-Z]/.test(password)) {
						uppercaseCheck.textContent = '✓';
						uppercaseCheck.className = 'requirement-icon valid';
					} else {
						uppercaseCheck.textContent = '✗';
						uppercaseCheck.className = 'requirement-icon invalid';
					}
					
					// Number check
					const numberCheck = document.getElementById('number-check');
					if (/[0-9]/.test(password)) {
						numberCheck.textContent = '✓';
						numberCheck.className = 'requirement-icon valid';
					} else {
						numberCheck.textContent = '✗';
						numberCheck.className = 'requirement-icon invalid';
					}
				});
			}

			// Password confirmation matching
			function checkPasswordMatch() {
				const password = passwordInput.value;
				const confirmPassword = confirmPasswordInput.value;
				const matchMessage = document.getElementById('password-match-message');
				
				if (confirmPassword.length > 0) {
					if (password === confirmPassword) {
						matchMessage.innerHTML = '<div class="field-success">Passwords match!</div>';
					} else {
						matchMessage.innerHTML = '<div class="field-error">Passwords do not match</div>';
					}
				} else {
					matchMessage.innerHTML = '';
				}
			}

			if (passwordInput && confirmPasswordInput) {
				passwordInput.addEventListener('input', checkPasswordMatch);
				confirmPasswordInput.addEventListener('input', checkPasswordMatch);
			}

			// Character counters for all inputs
			const inputs = [
				{ input: 'password', counter: 'password-counter' },
				{ input: 'confirmPassword', counter: 'confirmPassword-counter' }
			];

			inputs.forEach(item => {
				const inputElement = document.getElementById(item.input);
				const counterElement = document.getElementById(item.counter);
				
				if (inputElement && counterElement) {
					inputElement.addEventListener('input', function() {
						const length = this.value.length;
						const maxLength = this.getAttribute('maxlength');
						counterElement.textContent = `${length}/${maxLength}`;
						
						if (length > maxLength * 0.8) {
							counterElement.className = 'char-counter warning';
						} else if (length > maxLength * 0.9) {
							counterElement.className = 'char-counter danger';
						} else {
							counterElement.className = 'char-counter';
						}
					});
				}
			});

			
		});
	</script>
</body>
</html>
